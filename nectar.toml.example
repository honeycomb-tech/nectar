# Nectar Configuration File
# Copy this file to nectar.toml and update with your values
version = "1.0"

[database]
# Database connection string
dsn = "root:yourpassword@tcp(localhost:4000)/nectar?charset=utf8mb4&parseTime=True&loc=Local&timeout=300s&readTimeout=300s&writeTimeout=300s&maxAllowedPacket=67108864&autocommit=true&tx_isolation='READ-COMMITTED'"
connection_pool = 8
max_idle_conns = 4
max_open_conns = 8
conn_max_lifetime = "1h"

[cardano]
# Path to Cardano node socket
node_socket = "/opt/cardano/cnode/sockets/node.socket"
# Network magic: 764824073 (mainnet), 1097911063 (testnet), 1 (preprod), 2 (preview)
network_magic = 764824073
# Protocol mode: "auto", "node-to-node", "node-to-client"
protocol_mode = "auto"

[cardano.rewards]
# Reward calculation parameters
treasury_tax = 0.20
monetary_expansion = 0.003
optimal_pool_count = 500

[performance]
# Number of parallel workers for block processing
worker_count = 8
# Enable bulk sync mode for faster initial sync
bulk_mode_enabled = false
# Number of blocks to fetch in bulk mode
bulk_fetch_range_size = 2000
# Statistics update interval
stats_interval = "3s"
# Timeout for block fetch operations
blockfetch_timeout = "30s"
# Size of the block processing queue
block_queue_size = 10000

[dashboard]
# Enable dashboard display
enabled = true
# Dashboard type: "terminal", "web", "both", "none"
type = "terminal"
# Web dashboard port (if type is "web" or "both")
web_port = 8080
# Show detailed logs in dashboard
detailed_log = false

[monitoring]
# Enable Prometheus metrics
metrics_enabled = true
# Metrics server port
metrics_port = 9090
# Log level: "debug", "info", "warn", "error"
log_level = "info"
# Log format: "json", "text"
log_format = "json"

[metadata]
# Enable off-chain metadata fetching
enabled = true
# Number of metadata fetcher workers
worker_count = 4
# Metadata queue size
queue_size = 1000
# Rate limit (requests per second)
rate_limit = 10
# Maximum retries for failed requests
max_retries = 3
# User agent for metadata requests
user_agent = "Nectar/1.0"

[state_query]
# Enable state query service for rewards calculation
enabled = true
# Socket path (uses cardano.node_socket if empty)
socket_path = ""